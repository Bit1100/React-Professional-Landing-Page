{"version":3,"file":"static/js/64.dc71e29c.chunk.js","mappings":"mHAMA,IAJuB,SAAC,GAA8B,IAA5BA,EAA2B,EAA3BA,QACxB,OAAO,eAAIC,UAAU,kBAAd,SAAiCD,GACzC,C,mICUD,EAZiB,SAAC,GAAyB,IAAvBE,EAAsB,EAAtBA,KACVC,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,KACf,OACE,iBAAKH,UAAU,4CAAf,WACE,eAAIA,UAAU,UAAU,aAAYE,EAApC,SACGA,KAEH,0BAAOC,MAGZ,E,6BCoCD,EAvCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,KAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAA0B,IAApD,eAAOC,EAAP,KAAcC,EAAd,KACMC,ECT+B,SACrCC,EACAC,GAEA,OAA0CL,EAAAA,EAAAA,WAAS,GAAnD,eAAOG,EAAP,KAAsBG,EAAtB,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WAER,IAWMC,EAAW,IAAIC,sBAXC,SAACC,GACrBA,EAAQC,SAAQ,SAACC,GACXA,EAAMC,eACRP,GAAiB,GAEjBA,GAAiB,EAEpB,GACF,GAGwDD,GAMzD,OAHAG,EAASM,QAAQV,EAAIW,SAGd,WACLP,EAASQ,UAAUZ,EAAIW,QACxB,CACF,GAAE,CAACX,EAAKC,IAEFF,CACR,CDtBuBc,CAAwBnB,EAAS,CACrDoB,KAAM,KACNC,WAAY,MACZC,UAAW,MAqBb,OAlBAb,EAAAA,EAAAA,YAAU,WACR,IAAMc,EAAU,yCAAG,yGACMC,IAAAA,IAAA,UAClBC,uCADkB,gBADN,OACXC,EADW,OAIjBtB,EAASsB,EAASC,KAAKxB,OAJN,2CAAH,qDAOhBoB,GACD,GAAE,KAGHd,EAAAA,EAAAA,YAAU,WACJJ,GEvBuB,SAC7BL,GAEA,GAAIA,EAAQiB,QAAQW,iBAAkB,CACpC,IAAMC,EAAkBC,MAAMC,KAC5B/B,EAAQiB,QAAQW,iBAAiBI,UAGpB,OAAfH,QAAe,IAAfA,GAAAA,EAAiBhB,SAAQ,SAACoB,GAExB,IAAMC,EAAWD,EAAQE,kBAAkCD,QAErDE,EAA6BH,EAAQE,kBAE3C,GAAIC,EAAY,CACdA,EAAWC,YAAc,IACzB,IAAMC,EAASC,SAASL,EAAQpC,OAAS,KAGzB,SAAV0C,IACJ,IAAMC,EAAUF,SAASH,EAAWC,aAAe,KAC/CI,EAAUH,GACZF,EAAWC,YAAc,GAAKK,KAAKC,KAAKF,EAJ/B,IAKTG,OAAOC,WAAWL,EAAS,MAE3BJ,EAAWC,YAAcC,EAAOQ,UAEnC,CACDN,EACD,CACF,GACF,CACF,CFRKO,CAAgB/C,EAEnB,GAAE,CAACA,EAASK,KAGX,qBAASC,IAAKN,EAASJ,UAAU,OAAOoD,GAAG,OAA3C,WACE,SAACC,EAAA,EAAD,CAAgBtD,QAAQ,uBACxB,gBAAKC,UAAU,kDAAf,SACGO,EAAM+C,KAAI,SAACrD,GAAD,OACT,SAAC,EAAD,CAAmCA,KAAMA,GAA1BA,EAAKmD,GAAGF,WADd,QAMlB,C","sources":["components/Layout/SectionHeading.tsx","components/Sections/Deal/DealCard.tsx","components/Sections/Deal/index..tsx","hooks/useIntersectionObserver.tsx","utils/DealManipulator.tsx"],"sourcesContent":["import { HeadingType } from \"../../types\";\r\n\r\nconst SectionHeading = ({ heading }: HeadingType) => {\r\n  return <h2 className=\"section-heading\">{heading}</h2>;\r\n};\r\n\r\nexport default SectionHeading;\r\n","import { DealsType } from \"../../../types\";\r\n\r\nconst DealCard = ({ deal }: DealsType) => {\r\n  const { count, time } = deal;\r\n  return (\r\n    <div className=\"flex flex-col justify-center items-center\">\r\n      <h2 className=\"counter\" data-count={count}>\r\n        {count}\r\n      </h2>\r\n      <span>{time}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DealCard;\r\n","import { useState, useEffect } from \"react\";\r\nimport SectionHeading from \"../../Layout/SectionHeading\";\r\nimport DealCard from \"./DealCard\";\r\nimport axios from \"axios\";\r\nimport { useIntersectionObserver } from \"../../../hooks/useIntersectionObserver\";\r\nimport { DealManipulator } from \"../../../utils/DealManipulator\";\r\nimport { useAppContext } from \"../../../context\";\r\nimport { DealType } from \"../../../types\";\r\n\r\nconst Deal = () => {\r\n  const { dealRef } = useAppContext();\r\n  const [deals, setDeals] = useState<DealType[] | []>([]);\r\n  const isIntersected = useIntersectionObserver(dealRef, {\r\n    root: null,\r\n    rootMargin: \"0px\",\r\n    threshold: 0.05,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchDeals = async () => {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_REMOTE_API_BASEURL}/deals.json`\r\n      );\r\n      setDeals(response.data.deals);\r\n    };\r\n\r\n    fetchDeals();\r\n  }, []);\r\n\r\n  // Execute the manipulator fn on intersecting\r\n  useEffect(() => {\r\n    if (isIntersected) {\r\n      DealManipulator(dealRef);\r\n    }\r\n  }, [dealRef, isIntersected]);\r\n\r\n  return (\r\n    <section ref={dealRef} className=\"deal\" id=\"deal\">\r\n      <SectionHeading heading=\"Deals of the Week\" />\r\n      <div className=\"container flex justify-center wrap items-center\">\r\n        {deals.map((deal) => (\r\n          <DealCard key={deal.id.toString()} deal={deal} />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Deal;\r\n","import { useState, useEffect } from \"react\";\r\nimport { IOOptionsType, IOEntryType } from \"../types\";\r\n\r\nexport const useIntersectionObserver = (\r\n  ref: React.MutableRefObject<HTMLDivElement>,\r\n  options: IOOptionsType\r\n) => {\r\n  const [isIntersected, setIsIntersected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Handle Observation\r\n    const handleObserve = (entries: IOEntryType[]) => {\r\n      entries.forEach((entry: IOEntryType) => {\r\n        if (entry.isIntersecting) {\r\n          setIsIntersected(true);\r\n        } else {\r\n          setIsIntersected(false);\r\n        }\r\n      });\r\n    };\r\n\r\n    //  Creating an intersection Observer\r\n    const observer = new IntersectionObserver(handleObserve, options);\r\n\r\n    // Observing specific section\r\n    observer.observe(ref.current);\r\n\r\n    // Unobserve once it's done\r\n    return () => {\r\n      observer.unobserve(ref.current);\r\n    };\r\n  }, [ref, options]);\r\n\r\n  return isIntersected;\r\n};\r\n","export type OfferCount = {\r\n  textContent: string;\r\n  dataset: {\r\n    count: number;\r\n  };\r\n};\r\n\r\n// Update the Offer on Intersection\r\nexport const DealManipulator = (\r\n  dealRef: React.MutableRefObject<HTMLDivElement>\r\n) => {\r\n  if (dealRef.current.lastElementChild) {\r\n    const counterChildren = Array.from(\r\n      dealRef.current.lastElementChild.children\r\n    );\r\n\r\n    counterChildren?.forEach((counter) => {\r\n      // Type Assertion as HTMLElement has no dataset property by default\r\n      const dataset = (counter.firstElementChild as HTMLElement).dataset;\r\n\r\n      const offerCount: Element | null = counter.firstElementChild;\r\n\r\n      if (offerCount) {\r\n        offerCount.textContent = \"0\";\r\n        const target = parseInt(dataset.count || \"\");\r\n\r\n        const step = 0.3;\r\n        const countIt = () => {\r\n          const counted = parseInt(offerCount.textContent || \"0\");\r\n          if (counted < target) {\r\n            offerCount.textContent = \"\" + Math.ceil(counted + step);\r\n            window.setTimeout(countIt, 100);\r\n          } else {\r\n            offerCount.textContent = target.toString();\r\n          }\r\n        };\r\n        countIt();\r\n      }\r\n    });\r\n  }\r\n};\r\n"],"names":["heading","className","deal","count","time","dealRef","useAppContext","useState","deals","setDeals","isIntersected","ref","options","setIsIntersected","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","current","unobserve","useIntersectionObserver","root","rootMargin","threshold","fetchDeals","axios","process","response","data","lastElementChild","counterChildren","Array","from","children","counter","dataset","firstElementChild","offerCount","textContent","target","parseInt","countIt","counted","Math","ceil","window","setTimeout","toString","DealManipulator","id","SectionHeading","map"],"sourceRoot":""}