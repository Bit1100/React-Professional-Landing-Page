{"version":3,"file":"static/js/357.7db1ea6d.chunk.js","mappings":"4HAMA,IAJuB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACxB,OAAO,eAAIC,UAAU,kBAAd,SAAiCD,GACzC,C,mICUD,EAZiB,SAAC,GAAc,IAAZE,EAAW,EAAXA,KACVC,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,KACf,OACE,iBAAKH,UAAU,4CAAf,WACE,eAAIA,UAAU,UAAU,aAAYE,EAApC,SACGA,KAEH,0BAAOC,MAGZ,E,6BCkCD,EAtCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,KAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,ECT+B,SAACC,EAAKC,GAC3C,OAA0CL,EAAAA,EAAAA,WAAS,GAAnD,eAAOG,EAAP,KAAsBG,EAAtB,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WAER,IAWMC,EAAW,IAAIC,sBAXC,SAACC,GACrBA,EAAQC,SAAQ,SAACC,GACXA,EAAMC,eACRP,GAAiB,GAEjBA,GAAiB,EAEpB,GACF,GAGwDD,GAMzD,OAHAG,EAASM,QAAQV,EAAIW,SAGd,WACLP,EAASQ,UAAUZ,EAAIW,QACxB,CACF,GAAE,CAACX,EAAKC,IAEFF,CACR,CDnBuBc,CAAwBnB,EAAS,CACrDoB,KAAM,KACNC,WAAY,MACZC,UAAW,MAoBb,OAjBAb,EAAAA,EAAAA,YAAU,WACR,IAAMc,EAAU,yCAAG,yGACMC,IAAAA,IAAU,mCADhB,OACXC,EADW,OAGjBrB,EAASqB,EAASC,MAHD,2CAAH,qDAMhBH,GACD,GAAE,KAGHd,EAAAA,EAAAA,YAAU,WACJJ,GE5BuB,SAACL,GACb2B,MAAMC,KAAK5B,EAAQiB,QAAQY,iBAAiBC,UACpDjB,SAAQ,SAACkB,GAChB,IAAMC,EAAaD,EAAQE,kBAE3BD,EAAWE,UAAY,EAEvB,IAAMC,GAAUH,EAAWI,QAAQtC,OAInB,SAAVuC,IACJ,IAAMC,GAAWN,EAAWE,UACxBI,EAAUH,GACZH,EAAWE,UAAY,GAAKK,KAAKC,KAAKF,EAL7B,IAMTG,WAAWJ,EAAS,MAEpBL,EAAWE,UAAYC,CAE1B,CACDE,EACD,GACF,CFOKK,CAAgB1C,EAEnB,GAAE,CAACA,EAASK,KAGX,qBAASC,IAAKN,EAASJ,UAAU,OAAO+C,GAAG,OAA3C,WACE,SAACC,EAAA,EAAD,CAAgBjD,QAAQ,uBACxB,gBAAKC,UAAU,kDAAf,SACGO,EAAM0C,KAAI,SAAChD,GAAD,OACT,SAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAK8C,GADX,QAMlB,C","sources":["components/Layout/SectionHeading.js","components/Sections/Deal/DealCard.js","components/Sections/Deal/Deal.js","hooks/useIntersectionObserver.js","utils/DealManipulator.js"],"sourcesContent":["import React from \"react\";\n\nconst SectionHeading = ({ heading }) => {\n  return <h2 className=\"section-heading\">{heading}</h2>;\n};\n\nexport default SectionHeading;\n","import React from \"react\";\n\nconst DealCard = ({ deal }) => {\n  const { count, time } = deal;\n  return (\n    <div className=\"flex flex-col justify-center items-center\">\n      <h2 className=\"counter\" data-count={count}>\n        {count}\n      </h2>\n      <span>{time}</span>\n    </div>\n  );\n};\n\nexport default DealCard;\n","import React, { useState, useEffect } from \"react\";\nimport SectionHeading from \"../../Layout/SectionHeading\";\nimport DealCard from \"./DealCard\";\nimport axios from \"axios\";\nimport { useIntersectionObserver } from \"../../../hooks/useIntersectionObserver\";\nimport { DealManipulator } from \"../../../utils/DealManipulator\";\nimport { useData } from \"../../Layout/Global\";\n\nconst Deal = () => {\n  const { dealRef } = useData();\n  const [deals, setDeals] = useState([]);\n  const isIntersected = useIntersectionObserver(dealRef, {\n    root: null,\n    rootMargin: \"0px\",\n    threshold: 0.05,\n  });\n\n  useEffect(() => {\n    const fetchDeals = async () => {\n      const response = await axios.get(\"http://localhost:3001/api/deals\");\n\n      setDeals(response.data);\n    };\n\n    fetchDeals();\n  }, []);\n\n  // Execute the manipulator fn on intersecting\n  useEffect(() => {\n    if (isIntersected) {\n      DealManipulator(dealRef);\n    }\n  }, [dealRef, isIntersected]);\n\n  return (\n    <section ref={dealRef} className=\"deal\" id=\"deal\">\n      <SectionHeading heading=\"Deals of the Week\" />\n      <div className=\"container flex justify-center wrap items-center\">\n        {deals.map((deal) => (\n          <DealCard key={deal.id} deal={deal} />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default Deal;\n","import { useState, useEffect } from \"react\";\n\nexport const useIntersectionObserver = (ref, options) => {\n  const [isIntersected, setIsIntersected] = useState(false);\n\n  useEffect(() => {\n    // Handle Observation\n    const handleObserve = (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          setIsIntersected(true);\n        } else {\n          setIsIntersected(false);\n        }\n      });\n    };\n\n    //  Creating an intersection Observer\n    const observer = new IntersectionObserver(handleObserve, options);\n\n    // Observing specific section\n    observer.observe(ref.current);\n\n    // Unobserve once it's done\n    return () => {\n      observer.unobserve(ref.current);\n    };\n  }, [ref, options]);\n\n  return isIntersected;\n};\n","// Updating the Offer on Intersection\nexport const DealManipulator = (dealRef) => {\n  const counters = Array.from(dealRef.current.lastElementChild.children);\n  counters.forEach((counter) => {\n    const offerCount = counter.firstElementChild;\n\n    offerCount.innerText = 0;\n\n    const target = +offerCount.dataset.count;\n\n    const step = 0.3;\n\n    const countIt = () => {\n      const counted = +offerCount.innerText;\n      if (counted < target) {\n        offerCount.innerText = \"\" + Math.ceil(counted + step);\n        setTimeout(countIt, 100);\n      } else {\n        offerCount.innerText = target;\n      }\n    };\n    countIt();\n  });\n};\n"],"names":["heading","className","deal","count","time","dealRef","useData","useState","deals","setDeals","isIntersected","ref","options","setIsIntersected","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","current","unobserve","useIntersectionObserver","root","rootMargin","threshold","fetchDeals","axios","response","data","Array","from","lastElementChild","children","counter","offerCount","firstElementChild","innerText","target","dataset","countIt","counted","Math","ceil","setTimeout","DealManipulator","id","SectionHeading","map"],"sourceRoot":""}